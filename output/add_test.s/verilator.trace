$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $scope module $unit $end
   $var wire 7 t I_IMM_TYPE [6:0] $end
   $var wire 7 t I_OR_R_ALU [6:0] $end
   $var wire 7 u LD_TYPE [6:0] $end
   $var wire 7 u I_IMM_OR_LD [6:0] $end
   $var wire 7 v S_TYPE [6:0] $end
   $var wire 7 u LD_OR_S [6:0] $end
   $var wire 7 w B_TYPE [6:0] $end
   $var wire 7 x J_TYPE [6:0] $end
   $var wire 7 y I_JMP_TYPE [6:0] $end
   $var wire 7 y JAL_OR_JALR [6:0] $end
   $var wire 7 z AUIPC [6:0] $end
   $var wire 7 z U_TYPE [6:0] $end
  $upscope $end
  $var wire 1 j clk_i $end
  $var wire 1 k rst_i $end
  $var wire 1 l imem_ld_i $end
  $var wire 10 m imem_ld_addr_i [9:0] $end
  $var wire 32 n imem_ld_data_i [31:0] $end
  $scope module risc_v $end
   $var wire 32 o AddressWidth [31:0] $end
   $var wire 32 p DataWidth [31:0] $end
   $var wire 1 j clk_i $end
   $var wire 1 k rst_i $end
   $var wire 1 l imem_ld_i $end
   $var wire 10 m imem_ld_addr_i [9:0] $end
   $var wire 32 n imem_ld_data_i [31:0] $end
   $var wire 1 q halt $end
   $var wire 4 # alu_op [3:0] $end
   $var wire 2 $ regf_rd_src [1:0] $end
   $var wire 1 % alu_src2_sel $end
   $var wire 1 & jal $end
   $var wire 1 ' jalr $end
   $var wire 1 ( branch $end
   $var wire 1 ) auipc $end
   $var wire 1 * regf_wr_en $end
   $var wire 1 + mem_wr_en $end
   $var wire 1 , pc_src_sel $end
   $var wire 32 - target_pc [31:0] $end
   $var wire 32 G pc [31:0] $end
   $var wire 32 H pc_plus4 [31:0] $end
   $var wire 32 . next_pc [31:0] $end
   $var wire 1 / alu_flag $end
   $var wire 32 0 alu_src2 [31:0] $end
   $var wire 32 1 alu_result [31:0] $end
   $var wire 32 2 regf_rd_data [31:0] $end
   $var wire 32 3 regf_rs1_data [31:0] $end
   $var wire 32 4 regf_rs2_data [31:0] $end
   $var wire 32 5 uimm_type_data [31:0] $end
   $var wire 32 6 data_mem_r_data [31:0] $end
   $var wire 32 7 imm [31:0] $end
   $var wire 32 8 instr [31:0] $end
   $var wire 32 9 ld_data [31:0] $end
   $var wire 10 : imem_addr [9:0] $end
   $var wire 7 ; op_code [6:0] $end
   $var wire 3 < funct3 [2:0] $end
   $var wire 1 = funct7_h20 $end
   $var wire 5 > regf_rd_addr [4:0] $end
   $var wire 5 ? regf_rs1_addr [4:0] $end
   $var wire 5 @ regf_rs2_addr [4:0] $end
   $scope module alu $end
    $var wire 32 p DataWidth [31:0] $end
    $var wire 32 3 src1_i [31:0] $end
    $var wire 32 0 src2_i [31:0] $end
    $var wire 4 # alu_op_i [3:0] $end
    $var wire 32 1 result_o [31:0] $end
   $upscope $end
   $scope module alu_src2_mux $end
    $var wire 32 p DataWidth [31:0] $end
    $var wire 1 % sel_i $end
    $var wire 32 4 in0_i [31:0] $end
    $var wire 32 7 in1_i [31:0] $end
    $var wire 32 0 out_o [31:0] $end
   $upscope $end
   $scope module control_unit $end
    $var wire 7 ; op_code_i [6:0] $end
    $var wire 1 & jal_o $end
    $var wire 1 ' jalr_o $end
    $var wire 1 ( branch_o $end
    $var wire 1 ) auipc_o $end
    $var wire 1 * regf_wr_en_o $end
    $var wire 1 + mem_wr_en_o $end
    $var wire 2 $ regf_rd_src_o [1:0] $end
    $var wire 1 A fnc7_h20_i $end
    $var wire 3 < funct3_i [2:0] $end
    $var wire 1 % alu_src_o $end
    $var wire 4 # alu_op_o [3:0] $end
   $upscope $end
   $scope module ctrl_flow_unit $end
    $var wire 32 p DataWidth [31:0] $end
    $var wire 1 & jal_i $end
    $var wire 1 ' jalr_i $end
    $var wire 1 ( branch_i $end
    $var wire 1 / alu_flag_i $end
    $var wire 32 G pc_i [31:0] $end
    $var wire 32 3 rs1_data_i [31:0] $end
    $var wire 32 7 addr_offset_i [31:0] $end
    $var wire 1 , pc_src_sel_o $end
    $var wire 32 - pc_target_o [31:0] $end
    $var wire 32 B base_addr [31:0] $end
    $var wire 32 - pc_plus_offset [31:0] $end
   $upscope $end
   $scope module dmem $end
    $var wire 32 o AddressWidth [31:0] $end
    $var wire 32 p DataWidth [31:0] $end
    $var wire 1 j clk_i $end
    $var wire 1 + wr_en_i $end
    $var wire 10 C addr_i [9:0] $end
    $var wire 32 4 wr_data_i [31:0] $end
    $var wire 32 6 r_data_o [31:0] $end
   $upscope $end
   $scope module imem $end
    $var wire 32 o AddressWidth [31:0] $end
    $var wire 32 p DataWidth [31:0] $end
    $var wire 1 j clk_i $end
    $var wire 1 l wr_en_i $end
    $var wire 10 : addr_i [9:0] $end
    $var wire 32 n wr_data_i [31:0] $end
    $var wire 32 8 r_data_o [31:0] $end
   $upscope $end
   $scope module imm_extension_unit $end
    $var wire 32 8 instr_i [31:0] $end
    $var wire 32 7 imm_o [31:0] $end
    $var wire 7 ; op_code [6:0] $end
   $upscope $end
   $scope module ld_data_ext $end
    $var wire 3 < funct3_i [2:0] $end
    $var wire 2 D offset_i [1:0] $end
    $var wire 32 6 data_i [31:0] $end
    $var wire 32 9 data_o [31:0] $end
    $var wire 8 E byte_sel [7:0] $end
    $var wire 16 F halfword_sel [15:0] $end
   $upscope $end
   $scope module pc_adder $end
    $var wire 32 p DataWidth [31:0] $end
    $var wire 32 G a_i [31:0] $end
    $var wire 32 r b_i [31:0] $end
    $var wire 32 H y_o [31:0] $end
   $upscope $end
   $scope module pc_mux $end
    $var wire 32 p DataWidth [31:0] $end
    $var wire 1 , sel_i $end
    $var wire 32 H in0_i [31:0] $end
    $var wire 32 - in1_i [31:0] $end
    $var wire 32 . out_o [31:0] $end
   $upscope $end
   $scope module pc_reg $end
    $var wire 32 p DataWidth [31:0] $end
    $var wire 1 k rst_i $end
    $var wire 1 j clk_i $end
    $var wire 32 . d_i [31:0] $end
    $var wire 32 G q_o [31:0] $end
   $upscope $end
   $scope module regf_wr_data_mux $end
    $var wire 32 p DataWidth [31:0] $end
    $var wire 2 $ sel_i [1:0] $end
    $var wire 32 1 in0_i [31:0] $end
    $var wire 32 9 in1_i [31:0] $end
    $var wire 32 H in2_i [31:0] $end
    $var wire 32 5 in3_i [31:0] $end
    $var wire 32 2 out_o [31:0] $end
   $upscope $end
   $scope module regfile $end
    $var wire 32 p NumRegs [31:0] $end
    $var wire 32 p DataWidth [31:0] $end
    $var wire 32 s AddressWidth [31:0] $end
    $var wire 1 j clk_i $end
    $var wire 1 k rst_i $end
    $var wire 1 * wr_en_i $end
    $var wire 5 > rd_addr_i [4:0] $end
    $var wire 5 ? rs1_addr_i [4:0] $end
    $var wire 5 @ rs2_addr_i [4:0] $end
    $var wire 32 2 rd_data_i [31:0] $end
    $var wire 32 3 rs1_data_o [31:0] $end
    $var wire 32 4 rs2_data_o [31:0] $end
    $var wire 32 I i [31:0] $end
    $var wire 32 J register_file[0] [31:0] $end
    $var wire 32 K register_file[1] [31:0] $end
    $var wire 32 L register_file[2] [31:0] $end
    $var wire 32 M register_file[3] [31:0] $end
    $var wire 32 N register_file[4] [31:0] $end
    $var wire 32 O register_file[5] [31:0] $end
    $var wire 32 P register_file[6] [31:0] $end
    $var wire 32 Q register_file[7] [31:0] $end
    $var wire 32 R register_file[8] [31:0] $end
    $var wire 32 S register_file[9] [31:0] $end
    $var wire 32 T register_file[10] [31:0] $end
    $var wire 32 U register_file[11] [31:0] $end
    $var wire 32 V register_file[12] [31:0] $end
    $var wire 32 W register_file[13] [31:0] $end
    $var wire 32 X register_file[14] [31:0] $end
    $var wire 32 Y register_file[15] [31:0] $end
    $var wire 32 Z register_file[16] [31:0] $end
    $var wire 32 [ register_file[17] [31:0] $end
    $var wire 32 \ register_file[18] [31:0] $end
    $var wire 32 ] register_file[19] [31:0] $end
    $var wire 32 ^ register_file[20] [31:0] $end
    $var wire 32 _ register_file[21] [31:0] $end
    $var wire 32 ` register_file[22] [31:0] $end
    $var wire 32 a register_file[23] [31:0] $end
    $var wire 32 b register_file[24] [31:0] $end
    $var wire 32 c register_file[25] [31:0] $end
    $var wire 32 d register_file[26] [31:0] $end
    $var wire 32 e register_file[27] [31:0] $end
    $var wire 32 f register_file[28] [31:0] $end
    $var wire 32 g register_file[29] [31:0] $end
    $var wire 32 h register_file[30] [31:0] $end
    $var wire 32 i register_file[31] [31:0] $end
   $upscope $end
   $scope module utype_rd_data_mux $end
    $var wire 32 p DataWidth [31:0] $end
    $var wire 1 ) sel_i $end
    $var wire 32 7 in0_i [31:0] $end
    $var wire 32 - in1_i [31:0] $end
    $var wire 32 5 out_o [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b0000 #
b00 $
1%
0&
0'
0(
0)
1*
0+
0,
b00000000000000000000000000001010 -
b00000000000000000000000000000100 .
0/
b00000000000000000000000000001010 0
b00000000000000000000000000001010 1
b00000000000000000000000000001010 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000001010 5
b00000000000000000000000000000000 6
b00000000000000000000000000001010 7
b00000000101000000000000010010011 8
b00000000000000000000000000000000 9
b0000000000 :
b0010011 ;
b000 <
0=
b00001 >
b00000 ?
b01010 @
0A
b00000000000000000000000000000000 B
b0000000010 C
b10 D
b00000000 E
b0000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000100 H
b00000000000000000000000000100000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
b00000000000000000000000000000000 T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
b00000000000000000000000000000000 W
b00000000000000000000000000000000 X
b00000000000000000000000000000000 Y
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
b00000000000000000000000000000000 _
b00000000000000000000000000000000 `
b00000000000000000000000000000000 a
b00000000000000000000000000000000 b
b00000000000000000000000000000000 c
b00000000000000000000000000000000 d
b00000000000000000000000000000000 e
b00000000000000000000000000000000 f
b00000000000000000000000000000000 g
b00000000000000000000000000000000 h
b00000000000000000000000000000000 i
0j
0k
0l
b0000000110 m
b00000000000000000000000000010011 n
b00000000000000000000000000001010 o
b00000000000000000000000000100000 p
0q
b00000000000000000000000000000100 r
b00000000000000000000000000000101 s
b0010011 t
b0000011 u
b0100011 v
b1100011 w
b1101111 x
b1100111 y
b0010111 z
#1
b00000000000000000000000000011000 -
b00000000000000000000000000001000 .
b00000000000000000000000000010100 0
b00000000000000000000000000010100 1
b00000000000000000000000000010100 2
b00000000000000000000000000010100 5
b00000000000000000000000000010100 7
b00000001010000000000000100010011 8
b0000000001 :
b00010 >
b10100 @
b00000000000000000000000000000100 B
b0000000101 C
b00 D
b00000000000000000000000000000100 G
b00000000000000000000000000001000 H
b00000000000000000000000000001010 K
1j
#2
0j
#3
0%
b00000000000000000000000000001000 -
b00000000000000000000000000001100 .
b00000000000000000000000000011110 1
b00000000000000000000000000011110 2
b00000000000000000000000000001010 3
b00000000000000000000000000010100 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 7
b00000000001000001000000110110011 8
b0000000010 :
b0110011 ;
b00011 >
b00001 ?
b00010 @
b00000000000000000000000000001000 B
b0000000111 C
b10 D
b00000000000000000000000000001000 G
b00000000000000000000000000001100 H
b00000000000000000000000000010100 L
1j
#4
0j
#5
b00000000000000000000000000001100 -
b00000000000000000000000000010000 .
b00000000000000000000000000001010 0
b00000000000000000000000000101000 1
b00000000000000000000000000101000 2
b00000000000000000000000000011110 3
b00000000000000000000000000001010 4
b00000000000100011000001000110011 8
b0000000011 :
b00100 >
b00011 ?
b00001 @
b00000000000000000000000000001100 B
b0000001010 C
b00 D
b00000000000000000000000000001100 G
b00000000000000000000000000010000 H
b00000000000000000000000000011110 M
1j
#6
0j
#7
b00000000000000000000000000010000 -
b00000000000000000000000000010100 .
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000001010110011 8
b0000000100 :
b00101 >
b00000 ?
b00000 @
b00000000000000000000000000010000 B
b0000000000 C
b00000000000000000000000000010000 G
b00000000000000000000000000010100 H
b00000000000000000000000000101000 N
1j
#8
0j
